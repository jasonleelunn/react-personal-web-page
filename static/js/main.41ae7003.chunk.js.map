{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","ChildTest","props","state","name","colortop","colorbottom","handleChange","bind","changeColour","e","target","value","this","onChange","newColourTop","newColourBottom","setState","className","style","background","id","onClick","src","logo","alt","href","rel","React","Component","Boolean","window","location","hostname","match","Build","changeName","newName","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iIAAAA,EAAOC,QAAU,IAA0B,kC,4MCQ9BC,G,MAAb,kDACE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,KAAM,QACNC,SAVS,UAWTC,YAVS,WAaX,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAVH,EADrB,yDAceE,GACX,IAAMN,EAAOM,EAAEC,OAAOC,MACtBC,KAAKX,MAAMY,SAASV,KAhBxB,qCAoBI,IAAMW,EAxBK,YAwBUF,KAAKV,MAAME,SAvBrB,UADA,UAyBLW,EAxBK,YAwBaH,KAAKV,MAAMG,YAzBxB,UACA,UAyBXO,KAAKI,SAAS,CACdZ,SAAUU,EACVT,YAAaU,MAxBjB,+BA6BI,OACE,6BACA,yBAAKE,UAAU,YAAYC,MAAO,CAACC,WAAYP,KAAKV,MAAME,WACxD,8CACkBQ,KAAKX,MAAME,KAD7B,KAGA,4BAAQiB,GAAG,cAAcP,SAAUD,KAAKN,cACtC,4BAAQK,MAAM,QAAd,QAIA,4BAAQA,MAAM,WAAd,WAIA,4BAAQA,MAAM,UAAd,WAKF,4BAAQM,UAAU,cAAcI,QAAST,KAAKJ,cAA9C,aAKF,yBAAKS,UAAU,MAAMC,MAAO,CAACC,WAAYP,KAAKV,MAAMG,cACpD,4BAAQY,UAAU,cAChB,yBAAKK,IAAKC,IAAMN,UAAU,WAAWO,IAAI,SACzC,oCAGA,uBACEP,UAAU,WACVQ,KAAK,sBACLf,OAAO,SACPgB,IAAI,uBAJN,0BA5DR,GAA+BC,IAAMC,YCIjBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICTAC,E,kDAEL,WAAYjC,GAAQ,IAAD,8BAChB,cAAMA,IAEDC,MAAQ,CAAEC,KAAM,SAErB,EAAKgC,WAAa,EAAKA,WAAW5B,KAAhB,gBALF,E,uDAQN6B,GACVxB,KAAKI,SAAS,CACfb,KAAMiC,M,+BAKL,OACF,6BAEC,kBAAC,EAAD,CAAWjC,KAAMS,KAAKV,MAAMC,KAAMU,SAAUD,KAAKuB,kB,GApBhCR,IAAMC,WA2B1BS,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,SD2FpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.41ae7003.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst color1 = '#00cc00';\nconst color2 = '#FFD712';\n\n\nexport class ChildTest extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { \n      name: 'Jason',\n      colortop: color1,\n      colorbottom: color2\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.changeColour = this.changeColour.bind(this);\n  }\n\n  handleChange(e) {\n    const name = e.target.value;\n    this.props.onChange(name);\n  }\n\n  changeColour() {\n    const newColourTop = this.state.colortop === color1 ? color2 : color1;\n    const newColourBottom = this.state.colorbottom === color2 ? color1 : color2;\n    this.setState({\n    colortop: newColourTop,\n    colorbottom: newColourBottom\n    });\n  }\n\n  render() {\n    return (\n      <div>\n      <div className=\"ChildTest\" style={{background: this.state.colortop}} >\n        <h1>\n          Hey my name is {this.props.name}!\n        </h1>\n        <select id=\"great-names\" onChange={this.handleChange}>\n          <option value=\"Jase\">\n            Jase\n          </option>\n\n          <option value=\"Jay Man\">\n            Jay Man\n          </option>\n\n          <option value=\"Chunks\">\n            Chunks\n          </option>\n        </select>\n\n        <button className=\"childButton\" onClick={this.changeColour}>\n        Press Me\n        </button>\n      </div>\n\n      <div className=\"App\" style={{background: this.state.colorbottom}} >\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Hello\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Open the Portal\n        </a>\n      </header>\n    </div>\n    </div>\n    );\n  }\n}\n\n\n// function App() {\n//   return (\n//     <div className=\"App\" style={{background: this.state.colorbottom}}>\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Hello\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Open the Portal\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n\n// export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport {ChildTest} from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nclass Build extends React.Component {\n\n\tconstructor(props) {\n    super(props);\n\n    this.state = { name: 'Jason' };\n    \n    this.changeName = this.changeName.bind(this);\n  }\n\n   changeName(newName) {\n    this.setState({\n \t\tname: newName\n    });\n  }\n \n  render() {\n    return (\n\t\t<div>\n\n\t\t\t<ChildTest name={this.state.name} onChange={this.changeName} />\n\n  \t\t</div>\n    );\n  }\n}\n\nReactDOM.render(\n  // <React.StrictMode>\n    <Build />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}